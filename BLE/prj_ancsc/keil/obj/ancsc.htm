<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\obj\ancsc.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\obj\ancsc.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050169: Last Updated: Wed Feb 03 16:33:10 2016
<BR><P>
<H3>Maximum Stack Usage =        632 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; plf_init &rArr; nvds_restore_backup &rArr; nvds_copy &rArr; sector_erase_flash_patch
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[9]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SysTick_Handler</a><BR>
 <LI><a href="#[11]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[b]">ACMP0_IRQHandler</a> from analog.o(i.ACMP0_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[c]">ACMP1_IRQHandler</a> from analog.o(i.ACMP1_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[11]">ADC_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[d]">BLE_IRQHandler</a> from lib.o(i.BLE_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[21]">CALIB_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[12]">DMA_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[a]">GPIO_IRQHandler</a> from gpio.o(i.GPIO_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[19]">I2C_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[f]">OSC_EN_IRQHandler</a> from sleep.o(i.OSC_EN_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[1f]">PWM0_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[20]">PWM1_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[e]">RTC_CAP_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[10]">RTC_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[15]">SPI0_IRQHandler</a> from startup.o(.text) referenced 2 times from startup.o(RESET)
 <LI><a href="#[18]">SPI1_IRQHandler</a> from startup.o(.text) referenced 2 times from startup.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[1a]">TIMER0_IRQHandler</a> from timer.o(i.TIMER0_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[1b]">TIMER1_IRQHandler</a> from timer.o(i.TIMER1_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[1c]">TIMER2_IRQHandler</a> from timer.o(i.TIMER2_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[1d]">TIMER3_IRQHandler</a> from timer.o(i.TIMER3_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[22]">TUNER_RX_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[24]">TUNER_SETTING_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[23]">TUNER_TX_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[14]">UART0_RX_IRQHandler</a> from uart.o(i.UART0_RX_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[13]">UART0_TX_IRQHandler</a> from uart.o(i.UART0_TX_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[17]">UART1_RX_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[16]">UART1_TX_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[1e]">WDT_IRQHandler</a> from wdt.o(i.WDT_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[26]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup.o(.text)
 <LI><a href="#[29]">adc_offset_get_cb</a> from adc.o(i.adc_offset_get_cb) referenced from adc.o(i.__adc_calibrate)
 <LI><a href="#[2a]">adc_test_cb</a> from joysticks.o(i.adc_test_cb) referenced from joysticks.o(i.app_key_scan_timer_handler)
 <LI><a href="#[7d]">ancsc_cfg_indntf_cmd_handler</a> from ancsc_task.o(i.ancsc_cfg_indntf_cmd_handler) referenced from ancsc_task.o(.constdata)
 <LI><a href="#[7c]">ancsc_enable_cmd_handler</a> from ancsc_task.o(i.ancsc_enable_cmd_handler) referenced from ancsc_task.o(.constdata)
 <LI><a href="#[7e]">ancsc_get_ntf_attribute_cmd_handler</a> from ancsc_task.o(i.ancsc_get_ntf_attribute_cmd_handler) referenced 2 times from ancsc_task.o(.constdata)
 <LI><a href="#[42]">app_32k_xtal_wakeup_timer</a> from app_task.o(i.app_32k_xtal_wakeup_timer) referenced from app_task.o(.constdata)
 <LI><a href="#[76]">app_ancsc_ancs_content_ind_handler</a> from app_ancsc_task.o(i.app_ancsc_ancs_content_ind_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[79]">app_ancsc_cmp_evt_handler</a> from app_ancsc_task.o(i.app_ancsc_cmp_evt_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[78]">app_ancsc_data_source_ind_handler</a> from app_ancsc_task.o(i.app_ancsc_data_source_ind_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[7a]">app_ancsc_disable_ind_handler</a> from app_ancsc_task.o(i.app_ancsc_disable_ind_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[7b]">app_ancsc_enable_reset_timer_handler</a> from usr_design.o(i.app_ancsc_enable_reset_timer_handler) referenced 2 times from app_task.o(.constdata)
 <LI><a href="#[77]">app_ancsc_ntf_source_ind_handler</a> from app_ancsc_task.o(i.app_ancsc_ntf_source_ind_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[45]">app_button_timer_handler</a> from usr_design.o(i.app_button_timer_handler) referenced 2 times from app_task.o(.constdata)
 <LI><a href="#[41]">app_event_adc_key_sample_cmp_handler</a> from joysticks.o(i.app_event_adc_key_sample_cmp_handler) referenced from usr_design.o(i.usr_init)
 <LI><a href="#[40]">app_event_button1_press_handler</a> from usr_design.o(i.app_event_button1_press_handler) referenced from usr_design.o(i.usr_init)
 <LI><a href="#[44]">app_gap_adv_intv_update_timer_handler</a> from usr_design.o(i.app_gap_adv_intv_update_timer_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[4e]">app_gap_adv_req_cmp_evt_handler</a> from app_gap_task.o(i.app_gap_adv_req_cmp_evt_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[56]">app_gap_bond_req_cmp_ind_handler</a> from app_gap_task.o(i.app_gap_bond_req_cmp_ind_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[55]">app_gap_bond_req_ind_handler</a> from app_gap_task.o(i.app_gap_bond_req_ind_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[51]">app_gap_change_param_req_cmp_handler</a> from app_gap_task.o(i.app_gap_change_param_req_cmp_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[54]">app_gap_discon_cmp_evt_handler</a> from app_gap_task.o(i.app_gap_discon_cmp_evt_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[53]">app_gap_le_create_conn_req_cmp_evt_handler</a> from app_gap_task.o(i.app_gap_le_create_conn_req_cmp_evt_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[4f]">app_gap_param_update_resp_handler</a> from app_gap_task.o(i.app_gap_param_update_resp_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[4b]">app_gap_read_bdaddr_req_cmp_evt_handler</a> from app_gap_task.o(i.app_gap_read_bdaddr_req_cmp_evt_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[4a]">app_gap_read_ver_req_cmp_evt_handler</a> from app_gap_task.o(i.app_gap_read_ver_req_cmp_evt_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[4c]">app_gap_ready_evt_handler</a> from app_gap_task.o(i.app_gap_ready_evt_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[48]">app_gap_reset_req_cmp_handler</a> from app_gap_task.o(i.app_gap_reset_req_cmp_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[4d]">app_gap_set_devname_req_cmp_evt_handler</a> from app_gap_task.o(i.app_gap_set_devname_req_cmp_evt_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[52]">app_gap_set_mode_req_cmp_evt_handler</a> from app_gap_task.o(i.app_gap_set_mode_req_cmp_evt_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[50]">app_gap_set_privacy_req_cmp_handler</a> from app_gap_task.o(i.app_gap_set_privacy_req_cmp_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[57]">app_gap_set_random_add_req_cmp_handler</a> from app_gap_task.o(i.app_gap_set_random_add_req_cmp_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[49]">app_gap_set_sec_req_cmp_evt_handler</a> from app_gap_task.o(i.app_gap_set_sec_req_cmp_evt_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[67]">app_gatt_cancel_write_char_resp_handler</a> from app_gatt_task.o(i.app_gatt_cancel_write_char_resp_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[6d]">app_gatt_cmp_evt_handler</a> from app_gatt_task.o(i.app_gatt_cmp_evt_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[5f]">app_gatt_disc_char_all_128_cmp_evt_handler</a> from app_gatt_task.o(i.app_gatt_disc_char_all_128_cmp_evt_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[5d]">app_gatt_disc_char_all_cmp_evt_handler</a> from app_gatt_task.o(i.app_gatt_disc_char_all_cmp_evt_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[60]">app_gatt_disc_char_by_uuid_128_cmp_evt_handler</a> from app_gatt_task.o(i.app_gatt_disc_char_by_uuid_128_cmp_evt_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[5e]">app_gatt_disc_char_by_uuid_cmp_evt_handler</a> from app_gatt_task.o(i.app_gatt_disc_char_by_uuid_cmp_evt_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[62]">app_gatt_disc_char_desc_128_cmp_evt_handler</a> from app_gatt_task.o(i.app_gatt_disc_char_desc_128_cmp_evt_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[61]">app_gatt_disc_char_desc_cmp_evt_handler</a> from app_gatt_task.o(i.app_gatt_disc_char_desc_cmp_evt_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[6c]">app_gatt_disc_cmp_evt_handler</a> from app_gatt_task.o(i.app_gatt_disc_cmp_evt_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[5c]">app_gatt_disc_svc_all_128_cmp_evt_handler</a> from app_gatt_task.o(i.app_gatt_disc_svc_all_128_cmp_evt_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[59]">app_gatt_disc_svc_all_cmp_evt_handler</a> from app_gatt_task.o(i.app_gatt_disc_svc_all_cmp_evt_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[5a]">app_gatt_disc_svc_by_uuid_cmp_evt_handler</a> from app_gatt_task.o(i.app_gatt_disc_svc_by_uuid_cmp_evt_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[5b]">app_gatt_disc_svc_incl_cmp_evt_handler</a> from app_gatt_task.o(i.app_gatt_disc_svc_incl_cmp_evt_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[6b]">app_gatt_handle_value_cfm_handler</a> from app_gatt_task.o(i.app_gatt_handle_value_cfm_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[6a]">app_gatt_handle_value_ind_handler</a> from app_gatt_task.o(i.app_gatt_handle_value_ind_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[69]">app_gatt_handle_value_notif_handler</a> from app_gatt_task.o(i.app_gatt_handle_value_notif_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[68]">app_gatt_notify_cmp_evt_handler</a> from app_gatt_task.o(i.app_gatt_notify_cmp_evt_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[64]">app_gatt_read_char_mult_resp_handler</a> from app_gatt_task.o(i.app_gatt_read_char_mult_resp_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[63]">app_gatt_read_char_resp_handler</a> from app_gatt_task.o(i.app_gatt_read_char_resp_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[58]">app_gatt_resource_access_req_handler</a> from app_gap_task.o(i.app_gatt_resource_access_req_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[66]">app_gatt_write_char_reliable_resp_handler</a> from app_gatt_task.o(i.app_gatt_write_char_reliable_resp_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[65]">app_gatt_write_char_resp_handler</a> from app_gatt_task.o(i.app_gatt_write_char_resp_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[46]">app_key_process_timer_handler</a> from joysticks.o(i.app_key_process_timer_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[47]">app_key_scan_timer_handler</a> from joysticks.o(i.app_key_scan_timer_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[43]">app_led_timer_handler</a> from usr_design.o(i.app_led_timer_handler) referenced 2 times from app_task.o(.constdata)
 <LI><a href="#[73]">app_smpc_chk_bd_addr_req_ind_handler</a> from app_smp_task.o(i.app_smpc_chk_bd_addr_req_ind_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[72]">app_smpc_irk_req_ind_handler</a> from app_smp_task.o(i.app_smpc_irk_req_ind_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[6f]">app_smpc_key_ind_handler</a> from app_smp_task.o(i.app_smpc_key_ind_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[71]">app_smpc_ltk_req_ind_handler</a> from app_smp_task.o(i.app_smpc_ltk_req_ind_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[74]">app_smpc_sec_started_ind_handler</a> from app_smp_task.o(i.app_smpc_sec_started_ind_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[75]">app_smpc_timeout_evt_handler</a> from app_smp_task.o(i.app_smpc_timeout_evt_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[70]">app_smpc_tk_req_ind_handler</a> from app_smp_task.o(i.app_smpc_tk_req_ind_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[6e]">app_smpm_set_key_cfm_handler</a> from app_smp_task.o(i.app_smpm_set_key_cfm_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[3e]">atts_req_error_ind_handler_patch</a> from lib.o(i.atts_req_error_ind_handler_patch) referenced from lib.o(i.task_gatt_desc_register)
 <LI><a href="#[39]">default_enter_sleep_cb</a> from lib.o(i.default_enter_sleep_cb) referenced from lib.o(i.plf_init)
 <LI><a href="#[3a]">default_exit_sleep_cb</a> from lib.o(i.default_exit_sleep_cb) referenced from lib.o(i.plf_init)
 <LI><a href="#[36]">foo1</a> from lib.o(i.foo1) referenced from lib.o(i.plf_init)
 <LI><a href="#[28]">fputc</a> from retarget.o(i.fputc) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[85]">gap_discon_cmp_evt_handler</a> from ancsc_task.o(i.gap_discon_cmp_evt_handler) referenced from ancsc_task.o(.constdata)
 <LI><a href="#[2f]">gap_discon_ind_handler_patch</a> from lib.o(i.gap_discon_ind_handler_patch) referenced from lib.o(i.ble_init)
 <LI><a href="#[82]">gatt_cmp_evt_handler</a> from ancsc_task.o(i.gatt_cmp_evt_handler) referenced from ancsc_task.o(.constdata)
 <LI><a href="#[80]">gatt_disc_char_all_128_cmp_evt_handler</a> from ancsc_task.o(i.gatt_disc_char_all_128_cmp_evt_handler) referenced from ancsc_task.o(.constdata)
 <LI><a href="#[81]">gatt_disc_char_desc_evt_handler</a> from ancsc_task.o(i.gatt_disc_char_desc_evt_handler) referenced from ancsc_task.o(.constdata)
 <LI><a href="#[7f]">gatt_disc_svc_by_uuid_evt_handler</a> from ancsc_task.o(i.gatt_disc_svc_by_uuid_evt_handler) referenced from ancsc_task.o(.constdata)
 <LI><a href="#[84]">gatt_handle_value_ntf_handler</a> from ancsc_task.o(i.gatt_handle_value_ntf_handler) referenced from ancsc_task.o(.constdata)
 <LI><a href="#[3c]">gatt_read_char_req_handler_patch</a> from lib.o(i.gatt_read_char_req_handler_patch) referenced from lib.o(i.task_gatt_desc_register)
 <LI><a href="#[3d]">gatt_write_char_req_handler_patch</a> from lib.o(i.gatt_write_char_req_handler_patch) referenced from lib.o(i.task_gatt_desc_register)
 <LI><a href="#[83]">gatt_write_char_rsp_handler</a> from ancsc_task.o(i.gatt_write_char_rsp_handler) referenced from ancsc_task.o(.constdata)
 <LI><a href="#[27]">gpio_interrupt_callback</a> from usr_design.o(i.gpio_interrupt_callback) referenced from system.o(i.SystemInit)
 <LI><a href="#[2d]">l2cc_data_packet_ind_handler_patch</a> from lib.o(i.l2cc_data_packet_ind_handler_patch) referenced from lib.o(i.ble_init)
 <LI><a href="#[3f]">l2cc_data_send_rsp_handler_patch</a> from lib.o(i.l2cc_data_send_rsp_handler_patch) referenced from lib.o(i.task_gatt_desc_register)
 <LI><a href="#[38]">lld_sleep_init_new</a> from lib.o(i.lld_sleep_init_new) referenced from lib.o(i.plf_init)
 <LI><a href="#[37]">lld_sleep_lpcycles_2_us</a> from lib.o(i.lld_sleep_lpcycles_2_us) referenced from lib.o(i.plf_init)
 <LI><a href="#[2c]">lld_stop_ind_handler_new</a> from lib.o(i.lld_stop_ind_handler_new) referenced from lib.o(i.ble_init)
 <LI><a href="#[2b]">llm_lld_data_ind_handler_new</a> from lib.o(i.llm_lld_data_ind_handler_new) referenced from lib.o(i.ble_init)
 <LI><a href="#[25]">main</a> from app_main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[34]">nvds_erase</a> from lib.o(i.nvds_erase) referenced from lib.o(i.plf_init)
 <LI><a href="#[35]">nvds_read</a> from lib.o(i.nvds_read) referenced from lib.o(i.plf_init)
 <LI><a href="#[33]">nvds_write</a> from lib.o(i.nvds_write) referenced from lib.o(i.plf_init)
 <LI><a href="#[3b]">plf_reset_cb</a> from lib.o(i.plf_reset_cb) referenced from lib.o(i.plf_init)
 <LI><a href="#[31]">prf_dispatch_disconnect</a> from prf_utils.o(i.prf_dispatch_disconnect) referenced from app_main.o(i.main)
 <LI><a href="#[30]">prf_init</a> from prf_utils.o(i.prf_init) referenced from app_main.o(i.main)
 <LI><a href="#[32]">sleep_cb</a> from sleep.o(i.sleep_cb) referenced from app_main.o(i.main)
 <LI><a href="#[2e]">smp_rtx_ind_handler_patch</a> from lib.o(i.smp_rtx_ind_handler_patch) referenced from lib.o(i.ble_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[26]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.text)
</UL>
<P><STRONG><a name="[149]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[86]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[90]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[14a]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[14b]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[14c]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[14d]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[14e]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>CALIB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>I2C_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>PWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>RTC_CAP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TUNER_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TUNER_SETTING_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TUNER_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>UART1_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>UART1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[130]"></a>__aeabi_lmul</STRONG> (Thumb, 166 bytes, Stack size 0 bytes, math.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_sleep_lpcycles_2_us
</UL>

<P><STRONG><a name="[b9]"></a>__aeabi_uldivmod</STRONG> (Thumb, 256 bytes, Stack size 0 bytes, math.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_slot_2_lpcycles
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[14f]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[dd]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_i_to_array
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_event_adc_key_sample_cmp_handler
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_usart_clk
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_timer_clk
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_ble_clk
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_apb_clk
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_ahb_clk
</UL>

<P><STRONG><a name="[150]"></a>rand</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rand.o(.text), UNUSED)

<P><STRONG><a name="[13c]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plf_init
</UL>

<P><STRONG><a name="[b6]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_smp_init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_smpm_set_key_req
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_link_status_by_conhdl
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init_local_smp_key
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_bd_addr_by_idx
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_bd_addr_by_conhdl
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_add_bonded_dev
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_adv_start_req
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ancsc_enable_req
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ancsc_get_ntf_attribute_req
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_smpc_tk_req_rsp
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_smpc_ltk_req_rsp
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_smpc_irk_req_rsp
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_smpc_chk_bd_addr_req_rsp
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_bond_req
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_smpc_ltk_req_ind_handler
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_smpc_key_ind_handler
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_smpc_irk_req_ind_handler
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ancsc_ntf_source_ind_handler
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ancsc_data_source_ind_handler
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ancsc_ancs_content_ind_handler
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_gatt_write
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_client_enable
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_handle_value_ntf_handler
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_cmp_evt_handler
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancsc_send_get_ntf_attr_command
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancsc_get_ntf_attribute_cmd_handler
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancsc_enable_cmd_handler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_read
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_lld_data_ind_handler_new
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_data_packet_ind_handler_patch
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_write_char_req_handler_patch
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__nvds_wrtie
</UL>

<P><STRONG><a name="[fa]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_smp_init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_gatt_desc_register
</UL>

<P><STRONG><a name="[151]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[89]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[152]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[153]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[88]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_link_status_by_conhdl
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_client_env_alloc
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ancsc_data_source_ind_handler
</UL>

<P><STRONG><a name="[ca]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ancsc_clear_buffer
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ancsc_send_ancs_attribute_req_next
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ancsc_get_ntf_error_handler
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ancsc_ntf_source_ind_handler
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ancsc_data_source_ind_handler
</UL>

<P><STRONG><a name="[154]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[8a]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[139]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_search_chars128
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_nvds_put
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_restore_backup
</UL>

<P><STRONG><a name="[f9]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_adv_data
</UL>

<P><STRONG><a name="[8b]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_smpc_tk_req_ind_handler
</UL>

<P><STRONG><a name="[8d]"></a>strtol</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[87]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[155]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[8e]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[8f]"></a>_strtoul</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[91]"></a>_chval</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[156]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[157]"></a>__decompress0</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[92]"></a>__rd_reg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, math.o(REG_ACCESS_SECTION))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_sysclk_src
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_sleep
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash_id
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_flash_busy
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IRQHandler
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timer_GetIntFlag
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_ble_wakeup
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_GetBLESR
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_wakeup_config
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_sleep_allowed
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_RX_IRQHandler
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_uart_GetIntFlag
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_time
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_ble_sleep
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_IRQHandler
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_GetBLESR
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerup_calibration
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_lld_data_ind_handler_new
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_flash_off
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_read
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_clean_fifo
</UL>

<P><STRONG><a name="[93]"></a>__wr_reg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, math.o(REG_ACCESS_SECTION))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_event_adc_key_sample_cmp_handler
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_init
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_on_flash
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_off_flash
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_irq_clear
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_wdt_SetLKR
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timer_ClrIntFlag
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_post_process
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_wakeup_config
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_write_pin
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_uart_SetTXD
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_uart_ClrIntFlag
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_time
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_ble_sleep
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_IRQHandler
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sector_erase_flash_patch
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerup_calibration
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_lld_data_ind_handler_new
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[94]"></a>__wr_reg_with_msk</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, math.o(REG_ACCESS_SECTION))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_32k_xtal_wakeup_timer
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_32k_xtal_switch_clk
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_event_adc_key_sample_cmp_handler
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_sleep_restore
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_sysclk_src
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_by_sleep_timer
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plf_init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_dc_enable
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetADCCRWithMask
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_adc_SetADC1WithMask
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_adc_SetADC0WithMask
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_on_flash
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_off_flash
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_flash_busy
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetCMDCRWithMask
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_ble_setting
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetPGCR2WithMask
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetPGCR0WithMask
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetIvrefX32WithMask
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetCMDCRWithMask
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IRQHandler
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx_int_enable
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_int_enable
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetPGCR1WithMask
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetIvrefX32WithMask
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerup_calibration
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_dp_SetRegWithMask
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_cal_SetCAL1WithMask
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_cal_SetCAL0WithMask
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[b]"></a>ACMP0_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, analog.o(i.ACMP0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>ACMP1_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, analog.o(i.ACMP1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>BLE_IRQHandler</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, lib.o(i.BLE_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BLE_IRQHandler &rArr; default_exit_sleep_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rd_reg
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_exit_sleep_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>GPIO_IRQHandler</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, gpio.o(i.GPIO_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg_with_msk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>OSC_EN_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sleep.o(i.OSC_EN_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OSC_EN_IRQHandler &rArr; syscon_SetCMDCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetCMDCRWithMask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>SystemInit</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, system.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SystemInit &rArr; syscon_set_sysclk_src &rArr; syscon_SetCMDCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_usart_clk
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_timer_clk
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_sysclk_src
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_ble_clk
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_apb_clk
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_ahb_clk
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg_with_msk
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, timer.o(i.TIMER0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIMER0_IRQHandler &rArr; timer_timer_GetIntFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timer_GetIntFlag
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timer_ClrIntFlag
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rd_reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, timer.o(i.TIMER1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIMER1_IRQHandler &rArr; timer_timer_GetIntFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timer_GetIntFlag
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timer_ClrIntFlag
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rd_reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, timer.o(i.TIMER2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIMER2_IRQHandler &rArr; timer_timer_GetIntFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timer_GetIntFlag
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timer_ClrIntFlag
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rd_reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, timer.o(i.TIMER3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIMER3_IRQHandler &rArr; timer_timer_GetIntFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timer_GetIntFlag
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timer_ClrIntFlag
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rd_reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>UART0_RX_IRQHandler</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, uart.o(i.UART0_RX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART0_RX_IRQHandler &rArr; uart_uart_GetIntFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rd_reg
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_uart_GetIntFlag
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_uart_ClrIntFlag
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_int_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>UART0_TX_IRQHandler</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, uart.o(i.UART0_TX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART0_TX_IRQHandler &rArr; uart_uart_SetTXD
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_uart_SetTXD
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_uart_GetIntFlag
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx_int_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[a8]"></a>UartPutc</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, uart.o(i.UartPutc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UartPutc &rArr; uart_uart_SetTXD
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_uart_SetTXD
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_uart_GetIntFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[1e]"></a>WDT_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wdt.o(i.WDT_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WDT_IRQHandler &rArr; wdt_irq_clear &rArr; wdt_wdt_SetLKR
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_irq_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[aa]"></a>__0printf$8</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[158]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[cb]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_warn
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_err
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ancsc_send_ancs_attribute_req_next
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_smpc_tk_req_ind_handler
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_smpc_timeout_evt_handler
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_smpc_sec_started_ind_handler
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_smpc_ltk_req_ind_handler
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_smpc_key_ind_handler
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_smpc_irk_req_ind_handler
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_smpc_chk_bd_addr_req_ind_handler
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_process_timer_handler
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gatt_write_char_resp_handler
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gatt_write_char_reliable_resp_handler
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gatt_read_char_resp_handler
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gatt_read_char_mult_resp_handler
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gatt_notify_cmp_evt_handler
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gatt_handle_value_notif_handler
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gatt_handle_value_ind_handler
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gatt_handle_value_cfm_handler
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gatt_disc_svc_incl_cmp_evt_handler
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gatt_disc_svc_by_uuid_cmp_evt_handler
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gatt_disc_svc_all_cmp_evt_handler
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gatt_disc_svc_all_128_cmp_evt_handler
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gatt_disc_cmp_evt_handler
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gatt_disc_char_desc_cmp_evt_handler
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gatt_disc_char_desc_128_cmp_evt_handler
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gatt_disc_char_by_uuid_cmp_evt_handler
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gatt_disc_char_by_uuid_128_cmp_evt_handler
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gatt_disc_char_all_cmp_evt_handler
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gatt_disc_char_all_128_cmp_evt_handler
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gatt_cmp_evt_handler
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gatt_cancel_write_char_resp_handler
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_set_random_add_req_cmp_handler
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_set_privacy_req_cmp_handler
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_set_mode_req_cmp_evt_handler
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_set_devname_req_cmp_evt_handler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_read_bdaddr_req_cmp_evt_handler
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_param_update_resp_handler
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_le_create_conn_req_cmp_evt_handler
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_discon_cmp_evt_handler
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_change_param_req_cmp_handler
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_bond_req_ind_handler
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_bond_req_cmp_ind_handler
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_adv_req_cmp_evt_handler
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ancsc_ntf_source_ind_handler
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ancsc_disable_ind_handler
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ancsc_data_source_ind_handler
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ancsc_cmp_evt_handler
</UL>

<P><STRONG><a name="[e1]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, app_gap_task.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_get
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_bond_req_cmp_ind_handler
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_lld_data_ind_handler_new
</UL>

<P><STRONG><a name="[8c]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[159]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[ad]"></a>__nvds_get</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, lib.o(i.__nvds_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __nvds_get &rArr; power_on_flash &rArr; is_flash_present &rArr; read_flash_id
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_on_flash
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_off_flash
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_flash_off
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_smp_init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_adv_data
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plf_init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__adc_calibrate
</UL>

<P><STRONG><a name="[b3]"></a>__nvds_put</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, lib.o(i.__nvds_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = __nvds_put &rArr; patch_nvds_put &rArr; nvds_purge
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_on_flash
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_off_flash
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_nvds_put
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_flash_off
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_add_bonded_dev
</UL>

<P><STRONG><a name="[15a]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[15b]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[15c]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[bb]"></a>adc_clean_fifo</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, adc.o(i.adc_clean_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = adc_clean_fifo
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rd_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_read
</UL>

<P><STRONG><a name="[bc]"></a>adc_init</STRONG> (Thumb, 214 bytes, Stack size 48 bytes, adc.o(i.adc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = adc_init &rArr; __adc_calibrate &rArr; adc_read &rArr; adc_clean_fifo
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg_with_msk
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetADCCRWithMask
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_adc_SetADC1WithMask
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__adc_calibrate
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_scan_timer_handler
</UL>

<P><STRONG><a name="[af]"></a>adc_read</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, adc.o(i.adc_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = adc_read &rArr; adc_clean_fifo
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_adc_SetADC0WithMask
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rd_reg
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_clean_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_scan_timer_handler
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__adc_calibrate
</UL>

<P><STRONG><a name="[c5]"></a>ancsc_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ancsc.o(i.ancsc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ancsc_init &rArr; prf_client_reset &rArr; prf_client_env_free
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_client_reset
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_ancsc_desc_register
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_init
</UL>

<P><STRONG><a name="[c0]"></a>ancsc_send_cmp_evt</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, ancsc.o(i.ancsc_send_cmp_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ancsc_send_cmp_evt
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_write_char_rsp_handler
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_cmp_evt_handler
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancsc_get_ntf_attribute_cmd_handler
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancsc_enable_cmd_handler
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancsc_cfg_indntf_cmd_handler
</UL>

<P><STRONG><a name="[c1]"></a>ancsc_send_no_conn_cmp_evt</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ancsc.o(i.ancsc_send_no_conn_cmp_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ancsc_send_no_conn_cmp_evt
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancsc_enable_cmd_handler
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancsc_cfg_indntf_cmd_handler
</UL>

<P><STRONG><a name="[c8]"></a>app_add_bonded_dev</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, app_util.o(i.app_add_bonded_dev))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = app_add_bonded_dev &rArr; __nvds_put &rArr; patch_nvds_put &rArr; nvds_purge
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__nvds_put
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_bond_req_cmp_ind_handler
</UL>

<P><STRONG><a name="[76]"></a>app_ancsc_ancs_content_ind_handler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, app_ancsc_task.o(i.app_ancsc_ancs_content_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_ancsc_ancs_content_ind_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[d5]"></a>app_ancsc_cfg_indntf_req</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, app_ancsc.o(i.app_ancsc_cfg_indntf_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_ancsc_cfg_indntf_req
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ancsc_sm_entry
</UL>

<P><STRONG><a name="[c9]"></a>app_ancsc_clear_buffer</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, app_ancsc_task.o(i.app_ancsc_clear_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_ancsc_clear_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_msg_hdl
</UL>

<P><STRONG><a name="[79]"></a>app_ancsc_cmp_evt_handler</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, app_ancsc_task.o(i.app_ancsc_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = app_ancsc_cmp_evt_handler &rArr; app_ancsc_get_ntf_error_handler &rArr; app_ancsc_send_ancs_attribute_req_next &rArr; app_ancsc_get_ntf_attribute_req
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ancsc_sm_entry
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ancsc_get_ntf_error_handler
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[ce]"></a>app_ancsc_data_source_buffer</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, app_ancsc_task.o(i.app_ancsc_data_source_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = app_ancsc_data_source_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_read16p
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ancsc_data_source_ind_handler
</UL>

<P><STRONG><a name="[78]"></a>app_ancsc_data_source_ind_handler</STRONG> (Thumb, 668 bytes, Stack size 64 bytes, app_ancsc_task.o(i.app_ancsc_data_source_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = app_ancsc_data_source_ind_handler &rArr; app_ancsc_send_ancs_attribute_req_next &rArr; app_ancsc_get_ntf_attribute_req
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ancsc_send_ancs_attribute_req_next
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ancsc_data_source_buffer
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_read16p
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[7a]"></a>app_ancsc_disable_ind_handler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, app_ancsc_task.o(i.app_ancsc_disable_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = app_ancsc_disable_ind_handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[d1]"></a>app_ancsc_enable_req</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, app_ancsc.o(i.app_ancsc_enable_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_ancsc_enable_req
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_msg_hdl
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ancsc_enable_reset_timer_handler
</UL>

<P><STRONG><a name="[7b]"></a>app_ancsc_enable_reset_timer_handler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, usr_design.o(i.app_ancsc_enable_reset_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = app_ancsc_enable_reset_timer_handler &rArr; app_ancsc_enable_req
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ancsc_enable_req
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[d2]"></a>app_ancsc_get_ntf_attribute_req</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, app_ancsc.o(i.app_ancsc_get_ntf_attribute_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = app_ancsc_get_ntf_attribute_req
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ancsc_send_ancs_attribute_req_next
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ancsc_ntf_source_ind_handler
</UL>

<P><STRONG><a name="[cd]"></a>app_ancsc_get_ntf_error_handler</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, app_ancsc_task.o(i.app_ancsc_get_ntf_error_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = app_ancsc_get_ntf_error_handler &rArr; app_ancsc_send_ancs_attribute_req_next &rArr; app_ancsc_get_ntf_attribute_req
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ancsc_send_ancs_attribute_req_next
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ancsc_cmp_evt_handler
</UL>

<P><STRONG><a name="[77]"></a>app_ancsc_ntf_source_ind_handler</STRONG> (Thumb, 318 bytes, Stack size 40 bytes, app_ancsc_task.o(i.app_ancsc_ntf_source_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = app_ancsc_ntf_source_ind_handler &rArr; app_ancsc_get_ntf_attribute_req
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ancsc_get_ntf_attribute_req
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[d0]"></a>app_ancsc_send_ancs_attribute_req_next</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, app_ancsc_task.o(i.app_ancsc_send_ancs_attribute_req_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = app_ancsc_send_ancs_attribute_req_next &rArr; app_ancsc_get_ntf_attribute_req
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ancsc_get_ntf_attribute_req
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ancsc_get_ntf_error_handler
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ancsc_data_source_ind_handler
</UL>

<P><STRONG><a name="[cc]"></a>app_ancsc_sm_entry</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, app_ancsc_task.o(i.app_ancsc_sm_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = app_ancsc_sm_entry &rArr; app_gap_bond_req
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_bd_addr_by_idx
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ancsc_cfg_indntf_req
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_bond_req
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_msg_hdl
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ancsc_cmp_evt_handler
</UL>

<P><STRONG><a name="[45]"></a>app_button_timer_handler</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, usr_design.o(i.app_button_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = app_button_timer_handler &rArr; app_set_adv_data &rArr; __nvds_get &rArr; power_on_flash &rArr; is_flash_present &rArr; read_flash_id
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_read_pin
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_scan_rsp_data
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_adv_data
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_local_service_flag
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_adv_stop_req
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_adv_start_req
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_err
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[e8]"></a>app_create_server_service_DB</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_util.o(i.app_create_server_service_DB))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_read_bdaddr_req_cmp_evt_handler
</UL>

<P><STRONG><a name="[e6]"></a>app_enable_server_service</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_util.o(i.app_enable_server_service))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_le_create_conn_req_cmp_evt_handler
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_discon_cmp_evt_handler
</UL>

<P><STRONG><a name="[41]"></a>app_event_adc_key_sample_cmp_handler</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, joysticks.o(i.app_event_adc_key_sample_cmp_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = app_event_adc_key_sample_cmp_handler &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg_with_msk
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usr_design.o(i.usr_init)
</UL>
<P><STRONG><a name="[40]"></a>app_event_button1_press_handler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, usr_design.o(i.app_event_button1_press_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_event_button1_press_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_32k_xtal_start_timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usr_design.o(i.usr_init)
</UL>
<P><STRONG><a name="[ef]"></a>app_find_bonded_dev</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, app_util.o(i.app_find_bonded_dev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_find_bonded_dev
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_lk_sec_status
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_smpc_ltk_req_ind_handler
</UL>

<P><STRONG><a name="[44]"></a>app_gap_adv_intv_update_timer_handler</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, usr_design.o(i.app_gap_adv_intv_update_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = app_gap_adv_intv_update_timer_handler &rArr; app_set_adv_data &rArr; __nvds_get &rArr; power_on_flash &rArr; is_flash_present &rArr; read_flash_id
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_scan_rsp_data
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_adv_data
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_local_service_flag
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_adv_start_req
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_led1_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[4e]"></a>app_gap_adv_req_cmp_evt_handler</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, app_gap_task.o(i.app_gap_adv_req_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = app_gap_adv_req_cmp_evt_handler &rArr; app_task_msg_hdl &rArr; app_set_adv_data &rArr; __nvds_get &rArr; power_on_flash &rArr; is_flash_present &rArr; read_flash_id
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_msg_hdl
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[dc]"></a>app_gap_adv_start_req</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, app_gap.o(i.app_gap_adv_start_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = app_gap_adv_start_req
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_msg_hdl
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_adv_intv_update_timer_handler
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_timer_handler
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_process_timer_handler
</UL>

<P><STRONG><a name="[d8]"></a>app_gap_adv_stop_req</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, app_gap.o(i.app_gap_adv_stop_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_gap_adv_stop_req
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_timer_handler
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_process_timer_handler
</UL>

<P><STRONG><a name="[d4]"></a>app_gap_bond_req</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, app_gap.o(i.app_gap_bond_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = app_gap_bond_req
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ancsc_sm_entry
</UL>

<P><STRONG><a name="[56]"></a>app_gap_bond_req_cmp_ind_handler</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, app_gap_task.o(i.app_gap_bond_req_cmp_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = app_gap_bond_req_cmp_ind_handler &rArr; app_add_bonded_dev &rArr; __nvds_put &rArr; patch_nvds_put &rArr; nvds_purge
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_add_bonded_dev
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_msg_hdl
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[55]"></a>app_gap_bond_req_ind_handler</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, app_gap_task.o(i.app_gap_bond_req_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = app_gap_bond_req_ind_handler &rArr; app_gap_bond_resp
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_conhdl_by_idx
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_bond_resp
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[e3]"></a>app_gap_bond_resp</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, app_gap.o(i.app_gap_bond_resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_gap_bond_resp
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_bond_req_ind_handler
</UL>

<P><STRONG><a name="[51]"></a>app_gap_change_param_req_cmp_handler</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, app_gap_task.o(i.app_gap_change_param_req_cmp_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = app_gap_change_param_req_cmp_handler &rArr; app_task_msg_hdl &rArr; app_set_adv_data &rArr; __nvds_get &rArr; power_on_flash &rArr; is_flash_present &rArr; read_flash_id
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_msg_hdl
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[54]"></a>app_gap_discon_cmp_evt_handler</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, app_gap_task.o(i.app_gap_discon_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = app_gap_discon_cmp_evt_handler &rArr; app_task_msg_hdl &rArr; app_set_adv_data &rArr; __nvds_get &rArr; power_on_flash &rArr; is_flash_present &rArr; read_flash_id
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_link_status_by_conhdl
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_bd_addr_by_conhdl
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_enable_server_service
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_msg_hdl
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[53]"></a>app_gap_le_create_conn_req_cmp_evt_handler</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, app_gap_task.o(i.app_gap_le_create_conn_req_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = app_gap_le_create_conn_req_cmp_evt_handler &rArr; app_task_msg_hdl &rArr; app_set_adv_data &rArr; __nvds_get &rArr; power_on_flash &rArr; is_flash_present &rArr; read_flash_id
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_role
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_link_status_by_conhdl
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_enable_server_service
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_msg_hdl
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[4f]"></a>app_gap_param_update_resp_handler</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, app_gap_task.o(i.app_gap_param_update_resp_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = app_gap_param_update_resp_handler &rArr; app_task_msg_hdl &rArr; app_set_adv_data &rArr; __nvds_get &rArr; power_on_flash &rArr; is_flash_present &rArr; read_flash_id
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_msg_hdl
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[ea]"></a>app_gap_read_bdaddr_req</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_gap.o(i.app_gap_read_bdaddr_req))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_read_ver_req_cmp_evt_handler
</UL>

<P><STRONG><a name="[4b]"></a>app_gap_read_bdaddr_req_cmp_evt_handler</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, app_gap_task.o(i.app_gap_read_bdaddr_req_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = app_gap_read_bdaddr_req_cmp_evt_handler &rArr; app_task_msg_hdl &rArr; app_set_adv_data &rArr; __nvds_get &rArr; power_on_flash &rArr; is_flash_present &rArr; read_flash_id
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init_local_smp_key
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_create_server_service_DB
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_msg_hdl
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[ec]"></a>app_gap_read_ver_req</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_gap.o(i.app_gap_read_ver_req))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_set_sec_req_cmp_evt_handler
</UL>

<P><STRONG><a name="[4a]"></a>app_gap_read_ver_req_cmp_evt_handler</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, app_gap_task.o(i.app_gap_read_ver_req_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = app_gap_read_ver_req_cmp_evt_handler &rArr; app_task_msg_hdl &rArr; app_set_adv_data &rArr; __nvds_get &rArr; power_on_flash &rArr; is_flash_present &rArr; read_flash_id
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_msg_hdl
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_read_bdaddr_req
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[4c]"></a>app_gap_ready_evt_handler</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, app_gap_task.o(i.app_gap_ready_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = app_gap_ready_evt_handler &rArr; app_task_msg_hdl &rArr; app_set_adv_data &rArr; __nvds_get &rArr; power_on_flash &rArr; is_flash_present &rArr; read_flash_id
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_msg_hdl
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_set_sec_req
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[48]"></a>app_gap_reset_req_cmp_handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, app_gap_task.o(i.app_gap_reset_req_cmp_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = app_gap_reset_req_cmp_handler &rArr; app_task_msg_hdl &rArr; app_set_adv_data &rArr; __nvds_get &rArr; power_on_flash &rArr; is_flash_present &rArr; read_flash_id
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_msg_hdl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[102]"></a>app_gap_set_bondable_mode_req</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, app_gap.o(i.app_gap_set_bondable_mode_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_gap_set_bondable_mode_req
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_smpm_set_key_cfm_handler
</UL>

<P><STRONG><a name="[4d]"></a>app_gap_set_devname_req_cmp_evt_handler</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, app_gap_task.o(i.app_gap_set_devname_req_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = app_gap_set_devname_req_cmp_evt_handler &rArr; app_task_msg_hdl &rArr; app_set_adv_data &rArr; __nvds_get &rArr; power_on_flash &rArr; is_flash_present &rArr; read_flash_id
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_msg_hdl
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[52]"></a>app_gap_set_mode_req_cmp_evt_handler</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, app_gap_task.o(i.app_gap_set_mode_req_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = app_gap_set_mode_req_cmp_evt_handler &rArr; app_task_msg_hdl &rArr; app_set_adv_data &rArr; __nvds_get &rArr; power_on_flash &rArr; is_flash_present &rArr; read_flash_id
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_msg_hdl
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[50]"></a>app_gap_set_privacy_req_cmp_handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, app_gap_task.o(i.app_gap_set_privacy_req_cmp_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = app_gap_set_privacy_req_cmp_handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[57]"></a>app_gap_set_random_add_req_cmp_handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, app_gap_task.o(i.app_gap_set_random_add_req_cmp_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = app_gap_set_random_add_req_cmp_handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[eb]"></a>app_gap_set_sec_req</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, app_gap.o(i.app_gap_set_sec_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_gap_set_sec_req
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_ready_evt_handler
</UL>

<P><STRONG><a name="[49]"></a>app_gap_set_sec_req_cmp_evt_handler</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, app_gap_task.o(i.app_gap_set_sec_req_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = app_gap_set_sec_req_cmp_evt_handler &rArr; app_task_msg_hdl &rArr; app_set_adv_data &rArr; __nvds_get &rArr; power_on_flash &rArr; is_flash_present &rArr; read_flash_id
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_msg_hdl
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_read_ver_req
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[67]"></a>app_gatt_cancel_write_char_resp_handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_gatt_task.o(i.app_gatt_cancel_write_char_resp_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = app_gatt_cancel_write_char_resp_handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[6d]"></a>app_gatt_cmp_evt_handler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, app_gatt_task.o(i.app_gatt_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = app_gatt_cmp_evt_handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[5f]"></a>app_gatt_disc_char_all_128_cmp_evt_handler</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, app_gatt_task.o(i.app_gatt_disc_char_all_128_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = app_gatt_disc_char_all_128_cmp_evt_handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[5d]"></a>app_gatt_disc_char_all_cmp_evt_handler</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, app_gatt_task.o(i.app_gatt_disc_char_all_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = app_gatt_disc_char_all_cmp_evt_handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[60]"></a>app_gatt_disc_char_by_uuid_128_cmp_evt_handler</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, app_gatt_task.o(i.app_gatt_disc_char_by_uuid_128_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = app_gatt_disc_char_by_uuid_128_cmp_evt_handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[5e]"></a>app_gatt_disc_char_by_uuid_cmp_evt_handler</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, app_gatt_task.o(i.app_gatt_disc_char_by_uuid_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = app_gatt_disc_char_by_uuid_cmp_evt_handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[62]"></a>app_gatt_disc_char_desc_128_cmp_evt_handler</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, app_gatt_task.o(i.app_gatt_disc_char_desc_128_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = app_gatt_disc_char_desc_128_cmp_evt_handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[61]"></a>app_gatt_disc_char_desc_cmp_evt_handler</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, app_gatt_task.o(i.app_gatt_disc_char_desc_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = app_gatt_disc_char_desc_cmp_evt_handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[6c]"></a>app_gatt_disc_cmp_evt_handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_gatt_task.o(i.app_gatt_disc_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = app_gatt_disc_cmp_evt_handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[5c]"></a>app_gatt_disc_svc_all_128_cmp_evt_handler</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, app_gatt_task.o(i.app_gatt_disc_svc_all_128_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = app_gatt_disc_svc_all_128_cmp_evt_handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[59]"></a>app_gatt_disc_svc_all_cmp_evt_handler</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, app_gatt_task.o(i.app_gatt_disc_svc_all_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = app_gatt_disc_svc_all_cmp_evt_handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[5a]"></a>app_gatt_disc_svc_by_uuid_cmp_evt_handler</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, app_gatt_task.o(i.app_gatt_disc_svc_by_uuid_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = app_gatt_disc_svc_by_uuid_cmp_evt_handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[5b]"></a>app_gatt_disc_svc_incl_cmp_evt_handler</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, app_gatt_task.o(i.app_gatt_disc_svc_incl_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = app_gatt_disc_svc_incl_cmp_evt_handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[6b]"></a>app_gatt_handle_value_cfm_handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app_gatt_task.o(i.app_gatt_handle_value_cfm_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = app_gatt_handle_value_cfm_handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[6a]"></a>app_gatt_handle_value_ind_handler</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, app_gatt_task.o(i.app_gatt_handle_value_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = app_gatt_handle_value_ind_handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[69]"></a>app_gatt_handle_value_notif_handler</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, app_gatt_task.o(i.app_gatt_handle_value_notif_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = app_gatt_handle_value_notif_handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[68]"></a>app_gatt_notify_cmp_evt_handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app_gatt_task.o(i.app_gatt_notify_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = app_gatt_notify_cmp_evt_handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[64]"></a>app_gatt_read_char_mult_resp_handler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, app_gatt_task.o(i.app_gatt_read_char_mult_resp_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = app_gatt_read_char_mult_resp_handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[63]"></a>app_gatt_read_char_resp_handler</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, app_gatt_task.o(i.app_gatt_read_char_resp_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = app_gatt_read_char_resp_handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[58]"></a>app_gatt_resource_access_req_handler</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, app_gap_task.o(i.app_gatt_resource_access_req_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_gatt_resource_access_req_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[66]"></a>app_gatt_write_char_reliable_resp_handler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, app_gatt_task.o(i.app_gatt_write_char_reliable_resp_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = app_gatt_write_char_reliable_resp_handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[65]"></a>app_gatt_write_char_resp_handler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, app_gatt_task.o(i.app_gatt_write_char_resp_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = app_gatt_write_char_resp_handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[e4]"></a>app_get_bd_addr_by_conhdl</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, app_util.o(i.app_get_bd_addr_by_conhdl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_get_bd_addr_by_conhdl
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_link_status_by_conhdl
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_discon_cmp_evt_handler
</UL>

<P><STRONG><a name="[d3]"></a>app_get_bd_addr_by_idx</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, app_util.o(i.app_get_bd_addr_by_idx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_get_bd_addr_by_idx
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_link_status_by_idx
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ancsc_sm_entry
</UL>

<P><STRONG><a name="[fc]"></a>app_get_bond_nb</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_util.o(i.app_get_bond_nb))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_smpc_irk_req_ind_handler
</UL>

<P><STRONG><a name="[fd]"></a>app_get_bond_status</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, app_util.o(i.app_get_bond_status))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_smpc_irk_req_ind_handler
</UL>

<P><STRONG><a name="[e2]"></a>app_get_conhdl_by_idx</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, app_util.o(i.app_get_conhdl_by_idx))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = app_get_conhdl_by_idx
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_link_status_by_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_bond_req_ind_handler
</UL>

<P><STRONG><a name="[ed]"></a>app_get_link_status_by_idx</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, app_util.o(i.app_get_link_status_by_idx))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_conhdl_by_idx
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_bd_addr_by_idx
</UL>

<P><STRONG><a name="[ee]"></a>app_get_lk_sec_status</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, app_util.o(i.app_get_lk_sec_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = app_get_lk_sec_status &rArr; app_find_bonded_dev
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_find_bonded_dev
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_smpc_chk_bd_addr_req_ind_handler
</UL>

<P><STRONG><a name="[d9]"></a>app_get_local_service_flag</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_util.o(i.app_get_local_service_flag))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_msg_hdl
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_adv_intv_update_timer_handler
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_timer_handler
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_process_timer_handler
</UL>

<P><STRONG><a name="[103]"></a>app_get_rec_idx_by_conhdl</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, app_util.o(i.app_get_rec_idx_by_conhdl))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_msg_hdl
</UL>

<P><STRONG><a name="[ff]"></a>app_get_role</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_util.o(i.app_get_role))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_msg_hdl
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_smpc_ltk_req_ind_handler
</UL>

<P><STRONG><a name="[f0]"></a>app_i_to_array</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, app_util.o(i.app_i_to_array))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = app_i_to_array &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_smpc_tk_req_ind_handler
</UL>

<P><STRONG><a name="[f1]"></a>app_init</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, app_env.o(i.app_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = app_init &rArr; app_smp_init &rArr; __nvds_get &rArr; power_on_flash &rArr; is_flash_present &rArr; read_flash_id
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_app_desc_register
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_smp_init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_scan_rsp_data
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_adv_data
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_local_service_flag
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e9]"></a>app_init_local_smp_key</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, app_util.o(i.app_init_local_smp_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = app_init_local_smp_key &rArr; app_smpm_set_key_req
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_smpm_set_key_req
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_read_bdaddr_req_cmp_evt_handler
</UL>

<P><STRONG><a name="[46]"></a>app_key_process_timer_handler</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, joysticks.o(i.app_key_process_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = app_key_process_timer_handler &rArr; app_set_adv_data &rArr; __nvds_get &rArr; power_on_flash &rArr; is_flash_present &rArr; read_flash_id
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_scan_rsp_data
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_adv_data
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_local_service_flag
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_adv_stop_req
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_adv_start_req
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_enable_interrupt
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[47]"></a>app_key_scan_timer_handler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, joysticks.o(i.app_key_scan_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = app_key_scan_timer_handler &rArr; adc_init &rArr; __adc_calibrate &rArr; adc_read &rArr; adc_clean_fifo
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_read_pin
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_read
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[43]"></a>app_led_timer_handler</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, usr_design.o(i.app_led_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = app_led_timer_handler &rArr; led_set &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[db]"></a>app_set_adv_data</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, app_util.o(i.app_set_adv_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = app_set_adv_data &rArr; __nvds_get &rArr; power_on_flash &rArr; is_flash_present &rArr; read_flash_id
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__nvds_get
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_msg_hdl
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_adv_intv_update_timer_handler
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_timer_handler
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_process_timer_handler
</UL>

<P><STRONG><a name="[e5]"></a>app_set_link_status_by_conhdl</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, app_util.o(i.app_set_link_status_by_conhdl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = app_set_link_status_by_conhdl &rArr; app_get_bd_addr_by_conhdl
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_bd_addr_by_conhdl
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_le_create_conn_req_cmp_evt_handler
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_discon_cmp_evt_handler
</UL>

<P><STRONG><a name="[e7]"></a>app_set_role</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_util.o(i.app_set_role))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_le_create_conn_req_cmp_evt_handler
</UL>

<P><STRONG><a name="[da]"></a>app_set_scan_rsp_data</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, app_util.o(i.app_set_scan_rsp_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = app_set_scan_rsp_data
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_msg_hdl
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_adv_intv_update_timer_handler
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_timer_handler
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_process_timer_handler
</UL>

<P><STRONG><a name="[73]"></a>app_smpc_chk_bd_addr_req_ind_handler</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, app_smp_task.o(i.app_smpc_chk_bd_addr_req_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = app_smpc_chk_bd_addr_req_ind_handler &rArr; app_smpc_chk_bd_addr_req_rsp
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_lk_sec_status
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_smpc_chk_bd_addr_req_rsp
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[fb]"></a>app_smpc_chk_bd_addr_req_rsp</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, app_smp.o(i.app_smpc_chk_bd_addr_req_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = app_smpc_chk_bd_addr_req_rsp
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_smpc_chk_bd_addr_req_ind_handler
</UL>

<P><STRONG><a name="[72]"></a>app_smpc_irk_req_ind_handler</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, app_smp_task.o(i.app_smpc_irk_req_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = app_smpc_irk_req_ind_handler &rArr; app_smpc_irk_req_rsp
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_bond_status
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_bond_nb
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_smpc_irk_req_rsp
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[fe]"></a>app_smpc_irk_req_rsp</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, app_smp.o(i.app_smpc_irk_req_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = app_smpc_irk_req_rsp
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_smpc_irk_req_ind_handler
</UL>

<P><STRONG><a name="[6f]"></a>app_smpc_key_ind_handler</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, app_smp_task.o(i.app_smpc_key_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = app_smpc_key_ind_handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[71]"></a>app_smpc_ltk_req_ind_handler</STRONG> (Thumb, 172 bytes, Stack size 48 bytes, app_smp_task.o(i.app_smpc_ltk_req_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = app_smpc_ltk_req_ind_handler &rArr; app_smpc_ltk_req_rsp
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_find_bonded_dev
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_role
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_smpc_ltk_req_rsp
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[100]"></a>app_smpc_ltk_req_rsp</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, app_smp.o(i.app_smpc_ltk_req_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = app_smpc_ltk_req_rsp
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_smpc_ltk_req_ind_handler
</UL>

<P><STRONG><a name="[74]"></a>app_smpc_sec_started_ind_handler</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, app_smp_task.o(i.app_smpc_sec_started_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = app_smpc_sec_started_ind_handler &rArr; app_task_msg_hdl &rArr; app_set_adv_data &rArr; __nvds_get &rArr; power_on_flash &rArr; is_flash_present &rArr; read_flash_id
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_msg_hdl
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[75]"></a>app_smpc_timeout_evt_handler</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, app_smp_task.o(i.app_smpc_timeout_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = app_smpc_timeout_evt_handler &rArr; app_task_msg_hdl &rArr; app_set_adv_data &rArr; __nvds_get &rArr; power_on_flash &rArr; is_flash_present &rArr; read_flash_id
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_msg_hdl
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[70]"></a>app_smpc_tk_req_ind_handler</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, app_smp_task.o(i.app_smpc_tk_req_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = app_smpc_tk_req_ind_handler &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_i_to_array
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_smpc_tk_req_rsp
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[101]"></a>app_smpc_tk_req_rsp</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, app_smp.o(i.app_smpc_tk_req_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_smpc_tk_req_rsp
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_smpc_tk_req_ind_handler
</UL>

<P><STRONG><a name="[6e]"></a>app_smpm_set_key_cfm_handler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, app_smp_task.o(i.app_smpm_set_key_cfm_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_smpm_set_key_cfm_handler &rArr; app_gap_set_bondable_mode_req
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_set_bondable_mode_req
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[f5]"></a>app_smpm_set_key_req</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, app_smp.o(i.app_smpm_set_key_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_smpm_set_key_req
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init_local_smp_key
</UL>

<P><STRONG><a name="[e0]"></a>app_task_msg_hdl</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, usr_design.o(i.app_task_msg_hdl))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = app_task_msg_hdl &rArr; app_set_adv_data &rArr; __nvds_get &rArr; power_on_flash &rArr; is_flash_present &rArr; read_flash_id
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_scan_rsp_data
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_adv_data
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_role
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_rec_idx_by_conhdl
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_local_service_flag
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_adv_start_req
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ancsc_sm_entry
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ancsc_enable_req
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ancsc_clear_buffer
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_led1_set
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_smpc_timeout_evt_handler
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_smpc_sec_started_ind_handler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_set_sec_req_cmp_evt_handler
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_set_mode_req_cmp_evt_handler
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_set_devname_req_cmp_evt_handler
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_reset_req_cmp_handler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_ready_evt_handler
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_read_ver_req_cmp_evt_handler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_read_bdaddr_req_cmp_evt_handler
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_param_update_resp_handler
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_le_create_conn_req_cmp_evt_handler
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_discon_cmp_evt_handler
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_change_param_req_cmp_handler
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_bond_req_cmp_ind_handler
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_adv_req_cmp_evt_handler
</UL>

<P><STRONG><a name="[f4]"></a>app_uart_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_sys.o(i.app_uart_init))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init
</UL>

<P><STRONG><a name="[d7]"></a>assert_err</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, app_main.o(i.assert_err))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = assert_err &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_timer_handler
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_init
</UL>

<P><STRONG><a name="[104]"></a>assert_warn</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app_main.o(i.assert_warn))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = assert_warn &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_client_disable_ind_send
</UL>

<P><STRONG><a name="[105]"></a>ble_ext_wakeup_allow</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lib.o(i.ble_ext_wakeup_allow))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_ext_wakeup_allow &rArr; ble_hw_sleep &rArr; syscon_GetBLESR
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hw_sleep
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_GetBLESR
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_button1_cb
</UL>

<P><STRONG><a name="[106]"></a>ble_hw_sleep</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lib.o(i.ble_hw_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_hw_sleep &rArr; syscon_GetBLESR
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_GetBLESR
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ext_wakeup_allow
</UL>

<P><STRONG><a name="[108]"></a>ble_init</STRONG> (Thumb, 368 bytes, Stack size 56 bytes, lib.o(i.ble_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ble_init &rArr; task_gatt_desc_register
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_work_mode
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_gatt_desc_register
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10b]"></a>ble_sleep</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lib.o(i.ble_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_sleep &rArr; fw_ble_sleep &rArr; rwble_slot_2_lpcycles
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_ble_sleep
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_GetBLESR
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10d]"></a>ble_timer_patch</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lib.o(i.ble_timer_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_timer_patch &rArr; ke_time
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_time
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_schedule
</UL>

<P><STRONG><a name="[9f]"></a>button_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, button.o(i.button_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = button_init &rArr; gpio_wakeup_config
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_wakeup_config
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_enable_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[112]"></a>check_ble_wakeup</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lib.o(i.check_ble_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = check_ble_wakeup
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rd_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_sleep
</UL>

<P><STRONG><a name="[12e]"></a>co_buf_rx_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lib.o(i.co_buf_rx_get))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_lld_data_ind_handler_new
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_data_packet_ind_handler_patch
</UL>

<P><STRONG><a name="[10a]"></a>config_work_mode</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, lib.o(i.config_work_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = config_work_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_init
</UL>

<P><STRONG><a name="[113]"></a>dc_dc_enable</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, lib.o(i.dc_dc_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dc_dc_enable &rArr; syscon_SetPGCR1WithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg_with_msk
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetPGCR1WithMask
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetIvrefX32WithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[117]"></a>enter_sleep</STRONG> (Thumb, 410 bytes, Stack size 24 bytes, sleep.o(i.enter_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = enter_sleep &rArr; sleep_post_process &rArr; syscon_SetPGCR1WithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_post_process
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dbg_info
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_ble_wakeup
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetPGCR2WithMask
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetPGCR0WithMask
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetIvrefX32WithMask
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetCMDCRWithMask
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_GetBLESR
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rd_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[36]"></a>foo1</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lib.o(i.foo1))
<BR>[Address Reference Count : 1]<UL><LI> lib.o(i.plf_init)
</UL>
<P><STRONG><a name="[28]"></a>fputc</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, retarget.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fputc &rArr; UartPutc &rArr; uart_uart_SetTXD
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPutc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[10c]"></a>fw_ble_sleep</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, lib.o(i.fw_ble_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fw_ble_sleep &rArr; rwble_slot_2_lpcycles
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rd_reg
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_slot_2_lpcycles
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sleep
</UL>

<P><STRONG><a name="[f6]"></a>gpio_enable_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gpio.o(i.gpio_enable_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_process_timer_handler
</UL>

<P><STRONG><a name="[9d]"></a>gpio_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gpio.o(i.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[27]"></a>gpio_interrupt_callback</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usr_design.o(i.gpio_interrupt_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gpio_interrupt_callback &rArr; usr_button1_cb &rArr; wakeup_32k_xtal_switch_clk &rArr; syscon_SetIvrefX32WithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_button1_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system.o(i.SystemInit)
</UL>
<P><STRONG><a name="[d6]"></a>gpio_read_pin</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gpio.o(i.gpio_read_pin))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_get
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_timer_handler
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_scan_timer_handler
</UL>

<P><STRONG><a name="[127]"></a>gpio_read_pin_field</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gpio.o(i.gpio_read_pin_field))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_sleep_allowed
</UL>

<P><STRONG><a name="[128]"></a>gpio_set_direction</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gpio.o(i.gpio_set_direction))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_wakeup_config
</UL>

<P><STRONG><a name="[12f]"></a>gpio_set_direction_field</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpio.o(i.gpio_set_direction_field))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
</UL>

<P><STRONG><a name="[126]"></a>gpio_sleep_allowed</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gpio.o(i.gpio_sleep_allowed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_sleep_allowed
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_read_pin_field
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rd_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_sleep
</UL>

<P><STRONG><a name="[10f]"></a>gpio_wakeup_config</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, gpio.o(i.gpio_wakeup_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gpio_wakeup_config
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_direction
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rd_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_init
</UL>

<P><STRONG><a name="[129]"></a>gpio_write_pin</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gpio.o(i.gpio_write_pin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_write_pin
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set
</UL>

<P><STRONG><a name="[12b]"></a>is_flash_present</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, serialflash.o(i.is_flash_present))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = is_flash_present &rArr; read_flash_id
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash_id
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_on_flash
</UL>

<P><STRONG><a name="[12d]"></a>ke_schedule</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lib.o(i.ke_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ke_schedule &rArr; ble_timer_patch &rArr; ke_time
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_timer_patch
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10e]"></a>ke_time</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lib.o(i.ke_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ke_time
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rd_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_timer_patch
</UL>

<P><STRONG><a name="[147]"></a>ke_timer_empty</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lib.o(i.ke_timer_empty))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_sleep
</UL>

<P><STRONG><a name="[f8]"></a>led_get</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, led.o(i.led_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = led_get &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_read_pin
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_led_timer_handler
</UL>

<P><STRONG><a name="[9e]"></a>led_init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, led.o(i.led_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = led_init &rArr; led_set &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_direction_field
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[f7]"></a>led_set</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, led.o(i.led_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = led_set &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_write_pin
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_led_timer_handler
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_led1_set
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_process_timer_handler
</UL>

<P><STRONG><a name="[38]"></a>lld_sleep_init_new</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lib.o(i.lld_sleep_init_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lld_sleep_init_new
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(i.plf_init)
</UL>
<P><STRONG><a name="[25]"></a>main</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, app_main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = main &rArr; plf_init &rArr; nvds_restore_backup &rArr; nvds_copy &rArr; sector_erase_flash_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_by_sleep_timer
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_sleep
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plf_init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_schedule
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_sleep
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_dc_enable
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sleep
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg_with_msk
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[131]"></a>plf_init</STRONG> (Thumb, 610 bytes, Stack size 40 bytes, lib.o(i.plf_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = plf_init &rArr; nvds_restore_backup &rArr; nvds_copy &rArr; sector_erase_flash_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__nvds_get
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg_with_msk
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_on_flash
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetPGCR1WithMask
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetIvrefX32WithMask
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_GetBLESR
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerup_calibration
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_restore_backup
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_flash_off
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_dp_SetRegWithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b2]"></a>power_off_flash</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, serialflash.o(i.power_off_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = power_off_flash &rArr; is_flash_busy
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg_with_msk
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_flash_busy
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__nvds_put
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__nvds_get
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_read
</UL>

<P><STRONG><a name="[b1]"></a>power_on_flash</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, serialflash.o(i.power_on_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = power_on_flash &rArr; is_flash_present &rArr; read_flash_id
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg_with_msk
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_flash_present
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__nvds_put
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__nvds_get
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plf_init
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_read
</UL>

<P><STRONG><a name="[121]"></a>prf_check_svc_char_desc_validity</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, prf_utils.o(i.prf_check_svc_char_desc_validity))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = prf_check_svc_char_desc_validity
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_cmp_evt_handler
</UL>

<P><STRONG><a name="[13e]"></a>prf_client_disable</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, prf_utils.o(i.prf_client_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prf_client_disable &rArr; prf_client_env_free
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_client_pool_envs_free
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_client_env_free
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_client_disable_ind_send
</UL>

<P><STRONG><a name="[11f]"></a>prf_client_disable_ind_send</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, prf_utils.o(i.prf_client_disable_ind_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prf_client_disable_ind_send &rArr; assert_warn &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_warn
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_client_get_env
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_client_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_discon_cmp_evt_handler
</UL>

<P><STRONG><a name="[c2]"></a>prf_client_enable</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, prf_utils.o(i.prf_client_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prf_client_enable &rArr; prf_client_env_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_client_env_alloc
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancsc_enable_cmd_handler
</UL>

<P><STRONG><a name="[be]"></a>prf_client_get_env</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, prf_utils.o(i.prf_client_get_env))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_client_disable_ind_send
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_write_char_rsp_handler
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_handle_value_ntf_handler
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_disc_svc_by_uuid_evt_handler
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_disc_char_desc_evt_handler
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_disc_char_all_128_cmp_evt_handler
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_cmp_evt_handler
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancsc_get_ntf_attribute_cmd_handler
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancsc_enable_cmd_handler
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancsc_cfg_indntf_cmd_handler
</UL>

<P><STRONG><a name="[c7]"></a>prf_client_reset</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, prf_utils.o(i.prf_client_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prf_client_reset &rArr; prf_client_env_free
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_client_pool_envs_free
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_client_env_free
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancsc_init
</UL>

<P><STRONG><a name="[120]"></a>prf_disc_char_all_send</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, prf_utils.o(i.prf_disc_char_all_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prf_disc_char_all_send
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_cmp_evt_handler
</UL>

<P><STRONG><a name="[122]"></a>prf_disc_char_desc_send</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, prf_utils.o(i.prf_disc_char_desc_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prf_disc_char_desc_send
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_cmp_evt_handler
</UL>

<P><STRONG><a name="[31]"></a>prf_dispatch_disconnect</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, prf_utils.o(i.prf_dispatch_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prf_dispatch_disconnect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_main.o(i.main)
</UL>
<P><STRONG><a name="[bf]"></a>prf_gatt_write</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, prf_utils.o(i.prf_gatt_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prf_gatt_write
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancsc_cfg_indntf_cmd_handler
</UL>

<P><STRONG><a name="[30]"></a>prf_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, prf_utils.o(i.prf_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prf_init &rArr; ancsc_init &rArr; prf_client_reset &rArr; prf_client_env_free
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancsc_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_main.o(i.main)
</UL>
<P><STRONG><a name="[c3]"></a>prf_register_atthdl2gatt</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, prf_utils.o(i.prf_register_atthdl2gatt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prf_register_atthdl2gatt
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_cmp_evt_handler
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancsc_enable_cmd_handler
</UL>

<P><STRONG><a name="[123]"></a>prf_search_chars128</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, ancsc.o(i.prf_search_chars128))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = prf_search_chars128 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_disc_char_all_128_cmp_evt_handler
</UL>

<P><STRONG><a name="[124]"></a>prf_search_descs</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, prf_utils.o(i.prf_search_descs))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = prf_search_descs
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_disc_char_desc_evt_handler
</UL>

<P><STRONG><a name="[12c]"></a>read_flash_id</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, serialflash.o(i.read_flash_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = read_flash_id
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rd_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_flash_present
</UL>

<P><STRONG><a name="[142]"></a>restore_ble_setting</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, lib.o(i.restore_ble_setting))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = restore_ble_setting &rArr; dp_dp_SetRegWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg_with_msk
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_dp_SetRegWithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_cb
</UL>

<P><STRONG><a name="[11e]"></a>rwble_slot_2_lpcycles</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lib.o(i.rwble_slot_2_lpcycles))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rwble_slot_2_lpcycles
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_ble_sleep
</UL>

<P><STRONG><a name="[11b]"></a>set_dbg_info</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lib.o(i.set_dbg_info))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_sleep
</UL>

<P><STRONG><a name="[32]"></a>sleep_cb</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sleep.o(i.sleep_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sleep_cb &rArr; usr_sleep_restore &rArr; uart_init
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_sleep_restore
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_ble_setting
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_main.o(i.main)
</UL>
<P><STRONG><a name="[133]"></a>sleep_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, sleep.o(i.sleep_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sleep_init &rArr; syscon_SetPGCR0WithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg_with_msk
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetPGCR0WithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11d]"></a>sleep_post_process</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, lib.o(i.sleep_post_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sleep_post_process &rArr; syscon_SetPGCR1WithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetPGCR1WithMask
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_GetBLESR
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_dp_SetRegWithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_sleep
</UL>

<P><STRONG><a name="[98]"></a>syscon_set_ahb_clk</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, syscon.o(i.syscon_set_ahb_clk))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = syscon_set_ahb_clk &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetCMDCRWithMask
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[9a]"></a>syscon_set_apb_clk</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, syscon.o(i.syscon_set_apb_clk))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = syscon_set_apb_clk &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetCMDCRWithMask
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[99]"></a>syscon_set_ble_clk</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, syscon.o(i.syscon_set_ble_clk))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = syscon_set_ble_clk &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetCMDCRWithMask
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[97]"></a>syscon_set_sysclk_src</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, syscon.o(i.syscon_set_sysclk_src))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = syscon_set_sysclk_src &rArr; syscon_SetCMDCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg_with_msk
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetCMDCRWithMask
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rd_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[9b]"></a>syscon_set_timer_clk</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, syscon.o(i.syscon_set_timer_clk))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = syscon_set_timer_clk &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetCMDCRWithMask
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[9c]"></a>syscon_set_usart_clk</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, syscon.o(i.syscon_set_usart_clk))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = syscon_set_usart_clk &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetCMDCRWithMask
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[c6]"></a>task_ancsc_desc_register</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, ancsc_task.o(i.task_ancsc_desc_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = task_ancsc_desc_register
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancsc_init
</UL>

<P><STRONG><a name="[f3]"></a>task_app_desc_register</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, app_task.o(i.task_app_desc_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = task_app_desc_register
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init
</UL>

<P><STRONG><a name="[145]"></a>uart_check_tx_free</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, uart.o(i.uart_check_tx_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart_check_tx_free &rArr; uart_uart_GetIntFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_uart_GetIntFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_sleep
</UL>

<P><STRONG><a name="[a0]"></a>uart_init</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, uart.o(i.uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart_init
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_sleep_restore
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[125]"></a>usr_button1_cb</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, usr_design.o(i.usr_button1_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usr_button1_cb &rArr; wakeup_32k_xtal_switch_clk &rArr; syscon_SetIvrefX32WithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_32k_xtal_switch_clk
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ext_wakeup_allow
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_interrupt_callback
</UL>

<P><STRONG><a name="[132]"></a>usr_init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, usr_design.o(i.usr_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usr_init &rArr; assert_err &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_err
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[135]"></a>usr_sleep</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, sleep.o(i.usr_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usr_sleep &rArr; uart_check_tx_free &rArr; uart_uart_GetIntFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_empty
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetIvrefX32WithMask
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_GetBLESR
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_sleep_allowed
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_check_tx_free
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[143]"></a>usr_sleep_restore</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, usr_design.o(i.usr_sleep_restore))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = usr_sleep_restore &rArr; uart_init
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg_with_msk
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_cb
</UL>

<P><STRONG><a name="[de]"></a>wakeup_32k_xtal_start_timer</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sleep.o(i.wakeup_32k_xtal_start_timer))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_event_button1_press_handler
</UL>

<P><STRONG><a name="[146]"></a>wakeup_32k_xtal_switch_clk</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, sleep.o(i.wakeup_32k_xtal_switch_clk))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wakeup_32k_xtal_switch_clk &rArr; syscon_SetIvrefX32WithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg_with_msk
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetIvrefX32WithMask
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetCMDCRWithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_button1_cb
</UL>

<P><STRONG><a name="[134]"></a>wakeup_by_sleep_timer</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, sleep.o(i.wakeup_by_sleep_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wakeup_by_sleep_timer &rArr; syscon_SetPGCR2WithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg_with_msk
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetPGCR2WithMask
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetPGCR0WithMask
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetCMDCRWithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a9]"></a>wdt_irq_clear</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, wdt.o(i.wdt_irq_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wdt_irq_clear &rArr; wdt_wdt_SetLKR
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_wdt_SetLKR
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_IRQHandler
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[df]"></a>usr_led1_set</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, usr_design.o(i.usr_led1_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usr_led1_set &rArr; led_set &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_msg_hdl
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_adv_intv_update_timer_handler
</UL>

<P><STRONG><a name="[f2]"></a>app_smp_init</STRONG> (Thumb, 244 bytes, Stack size 48 bytes, app_env.o(i.app_smp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = app_smp_init &rArr; __nvds_get &rArr; power_on_flash &rArr; is_flash_present &rArr; read_flash_id
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__nvds_get
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init
</UL>

<P><STRONG><a name="[42]"></a>app_32k_xtal_wakeup_timer</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, app_task.o(i.app_32k_xtal_wakeup_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_32k_xtal_wakeup_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg_with_msk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[cf]"></a>co_read16p</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_ancsc_task.o(i.co_read16p))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ancsc_data_source_buffer
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ancsc_data_source_ind_handler
</UL>

<P><STRONG><a name="[141]"></a>prf_client_env_alloc</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, prf_utils.o(i.prf_client_env_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prf_client_env_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_client_enable
</UL>

<P><STRONG><a name="[13f]"></a>prf_client_env_free</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, prf_utils.o(i.prf_client_env_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prf_client_env_free
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_client_reset
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_client_disable
</UL>

<P><STRONG><a name="[140]"></a>prf_client_pool_envs_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, prf_utils.o(i.prf_client_pool_envs_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prf_client_pool_envs_free
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_client_reset
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_client_disable
</UL>

<P><STRONG><a name="[a5]"></a>uart_rx_int_enable</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, uart.o(i.uart_rx_int_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart_rx_int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg_with_msk
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_RX_IRQHandler
</UL>

<P><STRONG><a name="[a7]"></a>uart_tx_int_enable</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, uart.o(i.uart_tx_int_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart_tx_int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg_with_msk
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_TX_IRQHandler
</UL>

<P><STRONG><a name="[a4]"></a>uart_uart_ClrIntFlag</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uart.o(i.uart_uart_ClrIntFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart_uart_ClrIntFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_RX_IRQHandler
</UL>

<P><STRONG><a name="[a3]"></a>uart_uart_GetIntFlag</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uart.o(i.uart_uart_GetIntFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart_uart_GetIntFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rd_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_check_tx_free
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPutc
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_TX_IRQHandler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_RX_IRQHandler
</UL>

<P><STRONG><a name="[a6]"></a>uart_uart_SetTXD</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, uart.o(i.uart_uart_SetTXD))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart_uart_SetTXD
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPutc
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_TX_IRQHandler
</UL>

<P><STRONG><a name="[11c]"></a>syscon_GetBLESR</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sleep.o(i.syscon_GetBLESR))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = syscon_GetBLESR
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rd_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_sleep
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_sleep
</UL>

<P><STRONG><a name="[95]"></a>syscon_SetCMDCRWithMask</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sleep.o(i.syscon_SetCMDCRWithMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = syscon_SetCMDCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg_with_msk
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_32k_xtal_switch_clk
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_by_sleep_timer
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_sleep
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSC_EN_IRQHandler
</UL>

<P><STRONG><a name="[11a]"></a>syscon_SetIvrefX32WithMask</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sleep.o(i.syscon_SetIvrefX32WithMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = syscon_SetIvrefX32WithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg_with_msk
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_32k_xtal_switch_clk
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_sleep
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_sleep
</UL>

<P><STRONG><a name="[118]"></a>syscon_SetPGCR0WithMask</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sleep.o(i.syscon_SetPGCR0WithMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = syscon_SetPGCR0WithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg_with_msk
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_by_sleep_timer
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_init
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_sleep
</UL>

<P><STRONG><a name="[119]"></a>syscon_SetPGCR2WithMask</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sleep.o(i.syscon_SetPGCR2WithMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = syscon_SetPGCR2WithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg_with_msk
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_by_sleep_timer
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_sleep
</UL>

<P><STRONG><a name="[144]"></a>syscon_SetCMDCRWithMask</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, syscon.o(i.syscon_SetCMDCRWithMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = syscon_SetCMDCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg_with_msk
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_usart_clk
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_timer_clk
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_sysclk_src
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_ble_clk
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_apb_clk
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_ahb_clk
</UL>

<P><STRONG><a name="[a2]"></a>timer_timer_ClrIntFlag</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, timer.o(i.timer_timer_ClrIntFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_timer_ClrIntFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IRQHandler
</UL>

<P><STRONG><a name="[a1]"></a>timer_timer_GetIntFlag</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, timer.o(i.timer_timer_GetIntFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_timer_GetIntFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rd_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IRQHandler
</UL>

<P><STRONG><a name="[148]"></a>wdt_wdt_SetLKR</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, wdt.o(i.wdt_wdt_SetLKR))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wdt_wdt_SetLKR
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_irq_clear
</UL>

<P><STRONG><a name="[12a]"></a>is_flash_busy</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, serialflash.o(i.is_flash_busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = is_flash_busy
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg_with_msk
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rd_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_off_flash
</UL>

<P><STRONG><a name="[ac]"></a>__adc_calibrate</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, adc.o(i.__adc_calibrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __adc_calibrate &rArr; adc_read &rArr; adc_clean_fifo
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__nvds_get
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_adc_SetADC1WithMask
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_read
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[ba]"></a>adc_adc_SetADC0WithMask</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, adc.o(i.adc_adc_SetADC0WithMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adc_adc_SetADC0WithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg_with_msk
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_read
</UL>

<P><STRONG><a name="[ae]"></a>adc_adc_SetADC1WithMask</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, adc.o(i.adc_adc_SetADC1WithMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adc_adc_SetADC1WithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg_with_msk
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__adc_calibrate
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[29]"></a>adc_offset_get_cb</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, adc.o(i.adc_offset_get_cb))
<BR>[Address Reference Count : 1]<UL><LI> adc.o(i.__adc_calibrate)
</UL>
<P><STRONG><a name="[bd]"></a>syscon_SetADCCRWithMask</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, adc.o(i.syscon_SetADCCRWithMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = syscon_SetADCCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg_with_msk
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[2a]"></a>adc_test_cb</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, joysticks.o(i.adc_test_cb))
<BR>[Address Reference Count : 1]<UL><LI> joysticks.o(i.app_key_scan_timer_handler)
</UL>
<P><STRONG><a name="[b5]"></a>__nvds_wrtie</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, lib.o(i.__nvds_wrtie))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __nvds_wrtie
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_write
</UL>

<P><STRONG><a name="[3e]"></a>atts_req_error_ind_handler_patch</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lib.o(i.atts_req_error_ind_handler_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = atts_req_error_ind_handler_patch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(i.task_gatt_desc_register)
</UL>
<P><STRONG><a name="[110]"></a>cal_cal_SetCAL0WithMask</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lib.o(i.cal_cal_SetCAL0WithMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cal_cal_SetCAL0WithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg_with_msk
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerup_calibration
</UL>

<P><STRONG><a name="[111]"></a>cal_cal_SetCAL1WithMask</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lib.o(i.cal_cal_SetCAL1WithMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cal_cal_SetCAL1WithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg_with_msk
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerup_calibration
</UL>

<P><STRONG><a name="[39]"></a>default_enter_sleep_cb</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lib.o(i.default_enter_sleep_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = default_enter_sleep_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(i.plf_init)
</UL>
<P><STRONG><a name="[3a]"></a>default_exit_sleep_cb</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lib.o(i.default_exit_sleep_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = default_exit_sleep_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(i.plf_init)
</UL>
<P><STRONG><a name="[13d]"></a>delay</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lib.o(i.delay))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerup_calibration
</UL>

<P><STRONG><a name="[116]"></a>dp_dp_SetRegWithMask</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lib.o(i.dp_dp_SetRegWithMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dp_dp_SetRegWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg_with_msk
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plf_init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_post_process
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_ble_setting
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerup_calibration
</UL>

<P><STRONG><a name="[2f]"></a>gap_discon_ind_handler_patch</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, lib.o(i.gap_discon_ind_handler_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gap_discon_ind_handler_patch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(i.ble_init)
</UL>
<P><STRONG><a name="[3c]"></a>gatt_read_char_req_handler_patch</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, lib.o(i.gatt_read_char_req_handler_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gatt_read_char_req_handler_patch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(i.task_gatt_desc_register)
</UL>
<P><STRONG><a name="[3d]"></a>gatt_write_char_req_handler_patch</STRONG> (Thumb, 222 bytes, Stack size 40 bytes, lib.o(i.gatt_write_char_req_handler_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gatt_write_char_req_handler_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(i.task_gatt_desc_register)
</UL>
<P><STRONG><a name="[b0]"></a>is_flash_off</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lib.o(i.is_flash_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = is_flash_off
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rd_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__nvds_put
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__nvds_get
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plf_init
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_read
</UL>

<P><STRONG><a name="[2d]"></a>l2cc_data_packet_ind_handler_patch</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, lib.o(i.l2cc_data_packet_ind_handler_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = l2cc_data_packet_ind_handler_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_buf_rx_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(i.ble_init)
</UL>
<P><STRONG><a name="[3f]"></a>l2cc_data_send_rsp_handler_patch</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lib.o(i.l2cc_data_send_rsp_handler_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = l2cc_data_send_rsp_handler_patch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(i.task_gatt_desc_register)
</UL>
<P><STRONG><a name="[37]"></a>lld_sleep_lpcycles_2_us</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lib.o(i.lld_sleep_lpcycles_2_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lld_sleep_lpcycles_2_us
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(i.plf_init)
</UL>
<P><STRONG><a name="[2c]"></a>lld_stop_ind_handler_new</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, lib.o(i.lld_stop_ind_handler_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lld_stop_ind_handler_new
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(i.ble_init)
</UL>
<P><STRONG><a name="[2b]"></a>llm_lld_data_ind_handler_new</STRONG> (Thumb, 314 bytes, Stack size 40 bytes, lib.o(i.llm_lld_data_ind_handler_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = llm_lld_data_ind_handler_new &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rd_reg
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_buf_rx_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(i.ble_init)
</UL>
<P><STRONG><a name="[136]"></a>nvds_copy</STRONG> (Thumb, 58 bytes, Stack size 280 bytes, lib.o(i.nvds_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = nvds_copy &rArr; sector_erase_flash_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sector_erase_flash_patch
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_restore_backup
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_erase
</UL>

<P><STRONG><a name="[34]"></a>nvds_erase</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lib.o(i.nvds_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = nvds_erase &rArr; nvds_copy &rArr; sector_erase_flash_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sector_erase_flash_patch
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_copy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(i.plf_init)
</UL>
<P><STRONG><a name="[13a]"></a>nvds_purge</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, lib.o(i.nvds_purge))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nvds_purge
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_nvds_put
</UL>

<P><STRONG><a name="[35]"></a>nvds_read</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, lib.o(i.nvds_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nvds_read &rArr; power_on_flash &rArr; is_flash_present &rArr; read_flash_id
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_on_flash
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_off_flash
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_flash_off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(i.plf_init)
</UL>
<P><STRONG><a name="[138]"></a>nvds_restore_backup</STRONG> (Thumb, 98 bytes, Stack size 272 bytes, lib.o(i.nvds_restore_backup))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = nvds_restore_backup &rArr; nvds_copy &rArr; sector_erase_flash_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plf_init
</UL>

<P><STRONG><a name="[33]"></a>nvds_write</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, lib.o(i.nvds_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nvds_write &rArr; __nvds_wrtie
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__nvds_wrtie
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(i.plf_init)
</UL>
<P><STRONG><a name="[b4]"></a>patch_nvds_put</STRONG> (Thumb, 364 bytes, Stack size 192 bytes, lib.o(i.patch_nvds_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = patch_nvds_put &rArr; nvds_purge
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_purge
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__nvds_put
</UL>

<P><STRONG><a name="[3b]"></a>plf_reset_cb</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lib.o(i.plf_reset_cb))
<BR>[Address Reference Count : 1]<UL><LI> lib.o(i.plf_init)
</UL>
<P><STRONG><a name="[13b]"></a>powerup_calibration</STRONG> (Thumb, 330 bytes, Stack size 24 bytes, lib.o(i.powerup_calibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = powerup_calibration &rArr; syscon_SetPGCR1WithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg_with_msk
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rd_reg
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetPGCR1WithMask
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_GetBLESR
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_dp_SetRegWithMask
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_cal_SetCAL1WithMask
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_cal_SetCAL0WithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plf_init
</UL>

<P><STRONG><a name="[137]"></a>sector_erase_flash_patch</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, lib.o(i.sector_erase_flash_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sector_erase_flash_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_erase
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_copy
</UL>

<P><STRONG><a name="[2e]"></a>smp_rtx_ind_handler_patch</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, lib.o(i.smp_rtx_ind_handler_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = smp_rtx_ind_handler_patch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(i.ble_init)
</UL>
<P><STRONG><a name="[107]"></a>syscon_GetBLESR</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lib.o(i.syscon_GetBLESR))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = syscon_GetBLESR
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rd_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ext_wakeup_allow
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plf_init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sleep
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_post_process
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hw_sleep
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerup_calibration
</UL>

<P><STRONG><a name="[114]"></a>syscon_SetIvrefX32WithMask</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lib.o(i.syscon_SetIvrefX32WithMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = syscon_SetIvrefX32WithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg_with_msk
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plf_init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_dc_enable
</UL>

<P><STRONG><a name="[115]"></a>syscon_SetPGCR1WithMask</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lib.o(i.syscon_SetPGCR1WithMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = syscon_SetPGCR1WithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg_with_msk
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plf_init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_dc_enable
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_post_process
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerup_calibration
</UL>

<P><STRONG><a name="[109]"></a>task_gatt_desc_register</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, lib.o(i.task_gatt_desc_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = task_gatt_desc_register
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_init
</UL>

<P><STRONG><a name="[7d]"></a>ancsc_cfg_indntf_cmd_handler</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, ancsc_task.o(i.ancsc_cfg_indntf_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ancsc_cfg_indntf_cmd_handler &rArr; prf_gatt_write
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_gatt_write
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_client_get_env
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancsc_send_no_conn_cmp_evt
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancsc_send_cmp_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ancsc_task.o(.constdata)
</UL>
<P><STRONG><a name="[7c]"></a>ancsc_enable_cmd_handler</STRONG> (Thumb, 268 bytes, Stack size 48 bytes, ancsc_task.o(i.ancsc_enable_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ancsc_enable_cmd_handler &rArr; prf_client_enable &rArr; prf_client_env_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_register_atthdl2gatt
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_client_get_env
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_client_enable
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancsc_send_no_conn_cmp_evt
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancsc_send_cmp_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ancsc_task.o(.constdata)
</UL>
<P><STRONG><a name="[7e]"></a>ancsc_get_ntf_attribute_cmd_handler</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, ancsc_task.o(i.ancsc_get_ntf_attribute_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ancsc_get_ntf_attribute_cmd_handler &rArr; ancsc_send_get_ntf_attr_command
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_client_get_env
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancsc_send_get_ntf_attr_command
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancsc_send_cmp_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ancsc_task.o(.constdata)
</UL>
<P><STRONG><a name="[c4]"></a>ancsc_send_get_ntf_attr_command</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, ancsc_task.o(i.ancsc_send_get_ntf_attr_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ancsc_send_get_ntf_attr_command
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancsc_get_ntf_attribute_cmd_handler
</UL>

<P><STRONG><a name="[85]"></a>gap_discon_cmp_evt_handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ancsc_task.o(i.gap_discon_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gap_discon_cmp_evt_handler &rArr; prf_client_disable_ind_send &rArr; assert_warn &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_client_disable_ind_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ancsc_task.o(.constdata)
</UL>
<P><STRONG><a name="[82]"></a>gatt_cmp_evt_handler</STRONG> (Thumb, 248 bytes, Stack size 16 bytes, ancsc_task.o(i.gatt_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gatt_cmp_evt_handler &rArr; prf_disc_char_desc_send
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_register_atthdl2gatt
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_disc_char_desc_send
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_disc_char_all_send
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_client_get_env
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_check_svc_char_desc_validity
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancsc_send_cmp_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ancsc_task.o(.constdata)
</UL>
<P><STRONG><a name="[80]"></a>gatt_disc_char_all_128_cmp_evt_handler</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ancsc_task.o(i.gatt_disc_char_all_128_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = gatt_disc_char_all_128_cmp_evt_handler &rArr; prf_search_chars128 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_client_get_env
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_search_chars128
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ancsc_task.o(.constdata)
</UL>
<P><STRONG><a name="[81]"></a>gatt_disc_char_desc_evt_handler</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ancsc_task.o(i.gatt_disc_char_desc_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = gatt_disc_char_desc_evt_handler &rArr; prf_search_descs
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_search_descs
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_client_get_env
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ancsc_task.o(.constdata)
</UL>
<P><STRONG><a name="[7f]"></a>gatt_disc_svc_by_uuid_evt_handler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ancsc_task.o(i.gatt_disc_svc_by_uuid_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gatt_disc_svc_by_uuid_evt_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_client_get_env
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ancsc_task.o(.constdata)
</UL>
<P><STRONG><a name="[84]"></a>gatt_handle_value_ntf_handler</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, ancsc_task.o(i.gatt_handle_value_ntf_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gatt_handle_value_ntf_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_client_get_env
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ancsc_task.o(.constdata)
</UL>
<P><STRONG><a name="[83]"></a>gatt_write_char_rsp_handler</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ancsc_task.o(i.gatt_write_char_rsp_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gatt_write_char_rsp_handler &rArr; ancsc_send_cmp_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_client_get_env
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancsc_send_cmp_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ancsc_task.o(.constdata)
</UL>
<P><STRONG><a name="[ab]"></a>_printf_core</STRONG> (Thumb, 1020 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[b8]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[b7]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
